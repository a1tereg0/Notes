#pragma checksum "C:\Users\prasa\source\repos\NotesRestApi\Notes\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "606cb2978a649e92f582974ce668d8894ccb657c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Notes.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace Notes.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\prasa\source\repos\NotesRestApi\Notes\Pages\_ViewImports.cshtml"
using Notes;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"606cb2978a649e92f582974ce668d8894ccb657c", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c29453b1f4ace1a298e609e9dd9d3328205b8502", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\prasa\source\repos\NotesRestApi\Notes\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<main class=""app-notes"">
    <section class=""app-notes-item app-notes-browse"">
        <ul class=""notes-browse-list"">
        <li><button id=""add-notes-btn"">
                <svg xmlns=""http://www.w3.org/2000/svg"" width=""48"" height=""48"" viewBox=""0 0 24 24"" fill=""none"" stroke=""#fff"" stroke-width=""1"" stroke-linecap=""round"" stroke-linejoin=""round"" class=""feather feather-plus-square""><rect x=""3"" y=""3"" width=""18"" height=""18"" rx=""2"" ry=""2""></rect><line x1=""12"" y1=""8"" x2=""12"" y2=""16""></line><line x1=""8"" y1=""12"" x2=""16"" y2=""12""></line></svg>
            </button></li>
            <li><a id=""all-notes"">All notes</a></li>
        </ul>
    </section>
    <section class=""app-notes-item app-notes-list"">
        <ul class=""notes-list-group"" id=""notes-list-group"">

        </ul>
    </section>
    <section class=""app-notes-item app-notes-edit"">
        <textarea class=""notes-edit-text"" id=""notes-edit-text""></textarea>
    </section>
</main>

<script>
    const notesListGroup = document.getElementById(");
            WriteLiteral(@"'notes-list-group');
    const addNotesBtn = document.getElementById('add-notes-btn');
    const notesEditText = document.getElementById('notes-edit-text');
    addNotesBtn.addEventListener('click', (e => {
        e.preventDefault();
        alert(""Hasn't been implemented yet!"");
    }));
    const allNotesElement = document.getElementById('all-notes');
    let allNotes = null;
    allNotesElement.addEventListener('click', e => {
        e.preventDefault();
        if (allNotes === null) {
            fetch(""http://localhost:5000/api/Notes"")
                .then(response => response.json())
                .then(data => {
                    allNotes = data;
                    data.forEach(item => {
                        const noteItem = document.createElement('li');
                        // key or id used to track note items
                        noteItem.setAttribute(""data-key"", item.id)
                        const noteItemLink = document.createElement('a');
                 ");
            WriteLiteral(@"       const noteTitle = document.createTextNode(item.title);
                        noteItemLink.append(noteTitle);
                        noteItem.append(noteItemLink);
                        notesListGroup.append(noteItem);
                    });

                }
                );
        } else { return;}
    });

    // Utilizing event's bubbling phase to handle click on every note list items with the parent element ('notes-list-group')
    notesListGroup.addEventListener('click', e => {
        let listItemElement = e.target.tagName === 'A' ? e.target.parentElement : e.target;
        const noteItemId = listItemElement.dataset.key;
        fetch(`http://localhost:5000/api/Notes/${noteItemId}`)
            .then(res => res.json())
            .then(data => {
                notesEditText.value = data.description;
            })
    });


</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
